{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3c70965.chunk.js","sourcesContent":["const API_KEY = \"37505d7bf95c960296b96bd2b770b5df\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    //A snippet of code which runs based on a specific condition\r\n    useEffect(() => {\r\n        //If [], run once when the row loads, and don't run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl])\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            // https\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n\r\n                {movies.map((movie) => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${\r\n                            isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                        }`}\r\n                        alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            \r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, { useEffect, useState } from 'react'\r\nimport requests from './requests';\r\nimport \"./Banner.css\"\r\nimport axios from \"./axios\";\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([])\r\n\r\n    useEffect(() => {\r\n        //If [], run once when the row loads, and don't run again\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" \r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: \"center center\"\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                \r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                \r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                \r\n                <div className=\"banner__description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </div>\r\n            \r\n            </div>\r\n\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        })\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n                className=\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/archive/0/08/20160220053054%21Netflix_2015_logo.svg\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            <img \r\n                className=\"nav__avatar\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                alt=\"Netflix Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\nimport requests from './requests';\nimport Row from \"./Row\";\nimport './App.css';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}